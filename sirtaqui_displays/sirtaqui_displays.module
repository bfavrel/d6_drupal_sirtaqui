<?php
// $Id$

/**
 * @file
 * It create node displays
 *
 * @author Benoit Favrel
 */

/**
 * Implementation of hook_init().
 */
function sirtaqui_displays_init() {
    if(arg(0) == 'admin') {
        drupal_add_css(drupal_get_path('module', 'sirtaqui_displays') . '/css/sirtaqui_displays_admin.css', 'module', 'all', false);
        drupal_add_js(drupal_get_path('module', 'sirtaqui_displays') . '/scripts/sirtaqui_displays_admin.js', 'module', 'header', false, false);
    }
}

/**
* Valid permissions for this module
* @return array An array of valid permissions for the module
*/
function sirtaqui_displays_perm() {
  return array('administer sirtaqui displays', 'administer sirtaqui node displays');
}


/**
 * Implementation of hook_theme().
 */
function sirtaqui_displays_theme($existing, $type, $theme, $path) {

    return array(
        'sirtaqui_displays_node_displays' => array(
            'arguments' => array(),
        ),
    );
}

/**
 * Implementation of hook_theme_registry_alter().
 * Override content-admin-display-overview-form.tpl.php with module's version
 *
 * @param $theme_registry The entire cache of theme registry information, post-processing.
 */
function sirtaqui_displays_theme_registry_alter(&$theme_registry) {

    $original_path = array_shift($theme_registry['content_display_overview_form']['theme paths']);
    $new_path = drupal_get_path('module', 'sirtaqui_displays') . '/theme';
    array_unshift($theme_registry['content_display_overview_form']['theme paths'], $original_path, $new_path);

    // On informe le registre de l'override du thème du formulaire de paramétrage des affichages BM
    $theme_registry['content_display_overview_form']['preprocess functions'][] = 'sirtaqui_displays_preprocess_content_display_overview_form';
    $theme_registry['content_display_overview_form']['include files'][] = $new_path . '/theme.inc';
    $theme_registry['content_display_overview_form']['path'] = $new_path; // chemin du tpl

    // On informe le registre de l'existence d'une fonction de preprocess des nodes (ceux des listings) - pas de tpl
    $theme_registry['sirtaqui_listing']['preprocess functions'][] = 'sirtaqui_displays_preprocess_sirtaqui_listing';
    $theme_registry['sirtaqui_listing']['include files'][] = $new_path . '/theme.inc';
}

/**
 * Implementation of hook_menu()
 */
function sirtaqui_displays_menu() {
	$items = array();

        $items['admin/content/sirtaqui/mode_displays_js/set_node_display/%/%'] = array(
			'title' => '',
			'description' => '',
			'page callback' => 'sirtaqui_displays_js_set_node_display',
			'page arguments' => array(5, 6),
			'access arguments' => array('administer nodes'),
			'type' => MENU_CALLBACK,
			'file' => 'sirtaqui_displays.admin.inc',
	);

	$items['admin/content/sirtaqui/sirtaqui_displays/node_displays/edit'] = array(
			'title' => 'Edit Display type',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('sirtaqui_displays_node_displays_edit'),
			'access arguments' => array('administer sirtaqui node displays'),
			'type' => MENU_CALLBACK,
			'file' => 'sirtaqui_displays.admin.inc'
	);
	$items['admin/content/sirtaqui/sirtaqui_displays/node_displays/delete'] = array(
			'title' => 'Delete Display type',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('sirtaqui_displays_node_displays_confirm_delete'),
			'access arguments' => array('administer sirtaqui node displays'),
			'type' => MENU_CALLBACK,
			'file' => 'sirtaqui_displays.admin.inc'
	);

	$content_type = node_get_types('names');

	return $items;
}

/**
 * Implementation of hook_sirtaqui_settings.
 */
function sirtaqui_displays_sirtaqui_settings() {
    return array(
        'list' => array(
            'title' => 'List',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('sirtaqui_displays_node_displays'),
            'file' => 'sirtaqui_displays.admin.inc',
        ),
        'scl_settings' => array(
            'title' => 'SCL settings',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('sirtaqui_displays_scl_settings'),
            'file' => 'sirtaqui_displays.admin.inc',
        ),
        'init' => array(
            'title' => 'Init default build mode',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('sirtaqui_displays_init_default'),
            'file' => 'sirtaqui_displays.admin.inc',
        ),
    );
}

/**
 * Implementation of hook_content_build_modes().
 */
function sirtaqui_displays_content_build_modes() {

    // TODO : ne pas proposer les build modes pour les types de contenu non-sirtaqui

    $build_modes = array();
    $sirtaqui_build_modes = variable_get('sirtaqui_displays_node_displays', null);

    // TODO : passer 'views style' à false quand la dépendance à Views sera supprimée

    $build_modes['sirtaqui_default'] = array(
        'title' => t("Sirtaqui (default)"),
        'build modes' => array(
            'sirtaqui_listing' => array(
                'title' => "Sirtaqui" . " : " . t("Listing"),
                'views style' => true,
            ),
            'sirtaqui_fiche' => array(
                'title' => "Sirtaqui" . " : " . t("Fiche"),
                'views style' => true,
            ),
        ),
    );

    foreach((array)$sirtaqui_build_modes as $type => $value) {
        $build_modes[$type] = array(
            'title' => t($value['title']),
            'build modes' => array(
                $type . '_listing' => array(
                    'title' => $value['title'] . " : " . t("Listing"),
                    'views style' => true,
                ),
                $type . '_fiche' => array(
                    'title' => $value['title'] . " : " . t("Fiche"),
                    'views style' => true,
                ),
            ),
        );
    }

    return $build_modes;
}

/**
 * Implementation of hook_nodeapi().
 *
 * @param &$node The node the action is being performed on.
 * @param $op What kind of action is being performed. Possible values: alter, delete, delete revision, insert, load,
 *   prepare, prepare translation, print, rss item, search result, presave, update, update index, validate, view
 * @param $a3
 * @param $a4
 */
function sirtaqui_displays_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {

    switch ($op) {

        case 'load':
            if(preg_match('#^sirtaqui_#', $node->type) == false || !empty($node->view)){return;}

            // NOTE : ce BM est pris en compte par CCK dans content.module:730
            $node->build_mode = sirtaqui_displays_get_display_from_nid($node->nid) . '_fiche';
            break;

        case 'view':
            if(preg_match('#^sirtaqui_#', $node->type) == false || !empty($node->view)){return;}

            // TODO : à supprimer une fois le bug CCK corrigé (@see : http://drupal.org/node/1409062)
            // (en fait, le problème évoqué sur drupal.org est plus général que ça et ne concerne pas seulement les views.)
            // Le problème se pose en ces termes : CCK n'exclut jamais les champs dotés d'un build mode personnalisé.
            foreach($node->content as $field => $value) {
                $field_infos = content_fields($field, $node->type);

                if($field_infos['display_settings'][$node->build_mode]['exclude'] == true) {
                    unset($node->content[$field]);
                }
            }
            //---
            break;
    }
}

/**
 * Returns SIRTAqui display mode
 * @param int $nid
 * @return string
 */
function sirtaqui_displays_get_display_from_nid($nid) {
    $req = "SELECT display FROM {sirtaqui_displays} WHERE nid=%d";
    $display = db_result(db_query($req, $nid));

    return $display != false ? $display : 'sirtaqui';
}

/*
 * We must reload sirtaqui nodes with right build_mode
 * hook_preprocess_views_view_row_node()
 */
function sirtaqui_displays_preprocess_views_view_row_node(&$vars) {

    if (!empty($vars['row']->{$vars['field_alias']})) {
        $nid = $vars['row']->{$vars['field_alias']};
    }

    // On vérifie que le node est bien de type sirtaqui, et on profite de la reqiête pour récupérer son éventuel display mode
    $req = "SELECT n.nid, s_d.display FROM {node} AS n LEFT JOIN {sirtaqui_displays} AS s_d ON s_d.nid=n.nid WHERE n.nid='%d' AND n.type LIKE 'sirtaqui_%%'";
    $result = db_query($req, $nid);

    if($row = db_fetch_array($result)) {
        $display = $row['display'] != null ? $row['display'] : 'sirtaqui';
    } else {
        return;
    }

    $node = node_load($nid);

    if (empty($node)) {
        return;
    }

    $node->view = $vars['view'];
    $node->build_mode = $display . '_listing';
    $node->in_listing = true;
    $vars['node'] = node_view($node, true, FALSE, $options['links']);// teaser = true pour la compatibilité avec les anciens tpl (Périgueux, etc.)
}

function sirtaqui_displays_form_node_admin_content_alter(&$form, &$form_state) {

    $displays = variable_get('sirtaqui_displays_node_displays', array());
    $picto_default = drupal_get_path('module', 'sirtaqui_displays') . '/pictos/_sirtaqui_default.png';

    foreach(element_children($form['admin']['title']) as $nid) {

        $req = "SELECT nid FROM {node} WHERE nid=%d AND type LIKE 'sirtaqui_%%' LIMIT 0,1";
        $is_sirtaqui = db_result(db_query($req, $nid));
        if(empty($is_sirtaqui)) {continue;};

        $req = "SELECT display FROM {sirtaqui_displays} WHERE nid=%d";
        $display = db_result(db_query($req, $nid));

        if(!empty($display)) {
            $picto = !empty($displays[$display]['picto']) ? $displays[$display]['picto'] : $picto_default;
        } else {
            $picto = $picto_default;
        }

        $form['admin']['title'][$nid]['#value'] .= "<span id='sirtaqui_displays_picto_link_" . $nid . "' class='sirtaqui_displays_picto_link'>" .
                theme('image', $picto, null, null, array('class' => 'sirtaqui_displays_picto')) .
                "<input type='hidden' value='" . $display . "'/>" .
                "</span>";
    }

    // on ajoute un element 'radios' unique, qui sera utilisé par chaque node comme interface avec le callback JQuery :
    array_walk($displays, function(&$value, $key){
        $value = (!empty($value['picto']) ?
                theme('image', $value['picto'], null, null, array('class' => 'sirtaqui_displays_pictos')) :
                theme('image', drupal_get_path('module', 'sirtaqui_displays') . '/pictos/_sirtaqui_default.png', null, null, array('class' => 'sirtaqui_displays_picto'))) .
                " " . t($value['title']);
    });

    $displays = array_merge(array(
        'sirtaqui' => theme('image', drupal_get_path('module', 'sirtaqui_displays') . '/pictos/_sirtaqui_default.png', null, null, array('class' => 'sirtaqui_displays_picto')) .
        " " . t("Sirtaqui (default)")
        ), $displays
    );

    $form['sirtaqui_display_settings'] = array(
        '#type' => 'radios',
        '#title' => t("Display type"),
        '#options' => $displays,
        '#prefix' => "<div id='sirtaqui_displays_selector_element'>",
        '#suffix' => "</div>",
    );

}

/**
 * Implementation of hook_scl_query()
 */
function sirtaqui_displays_scl_query(&$query, &$compiler_options) {

    $display_modes = variable_get('sirtaqui_displays_node_displays', null);
    
    if(empty($display_modes)) {return;}
    
    // le tableau a déjà été classé par weights lors de la sauvegarde des display modes
    $displays = array_keys($display_modes);

    $orderby_mode = variable_get('sirtaqui_displays_query_orderby', 0);

    if($orderby_mode != 0 && !empty($displays)) { // pas de BM paramétrés = pas de tri
        $query['join'][] = "LEFT JOIN {sirtaqui_displays} AS sirtaqui_displays ON sirtaqui_displays.nid=n.nid";

        $order_by_clause = "(sirtaqui_displays.display='sirtaqui' OR sirtaqui_displays.display IS NULL) DESC, (sirtaqui_displays.display IS NOT NULL && sirtaqui_displays.display='" . implode("') DESC, (sirtaqui_displays.display IS NOT NULL && sirtaqui_displays.display='", $displays) . "') DESC";

        switch($orderby_mode) {
            case 1: // prepend
                array_unshift($query['order_by'], $order_by_clause);
                break;

            case 2: // append
                array_push($query['order_by'], $order_by_clause);
                break;

            case 3: // replace
                $query['order_by'] = array($order_by_clause);
                break;
        }
    }
}


