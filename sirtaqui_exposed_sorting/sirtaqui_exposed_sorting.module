<?php

/**
 * Implementation of hook_menu().
 */
function sirtaqui_exposed_sorting_menu() {
    $items = array();

    $items['admin/content/sirtaqui/content_listing/edit/%ctlid/exposed_sorting'] = array(
        'title' => 'Exposed sorting',
        'page callback' => 'sirtaqui_exposed_sorting_edit',
        'page arguments' => array(5),
        'access arguments' => array('administer SCL advanced features'),
        'type' => MENU_LOCAL_TASK,
		'weight' => 5,
    );

    return $items;
}

/*
 * Implementation of hook_sirtaqui_settings()
 */
function sirtaqui_exposed_sorting_sirtaqui_settings() {
    return array(
        'scl_settings' => array(
            'title' => 'SCL settings',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('sirtaqui_exposed_sorting_scl_settings'),
        ),
    );
}

/*
 * Module settings form
 */
function sirtaqui_exposed_sorting_scl_settings($form_state) {
    $form = array();
    
    $form['exposed_sorting_store_inputs'] = array(
        '#type' => 'checkbox',
        '#title' => t("Keep user sorting settings stored permanently"),
        '#description' => t("If unchecked, user sorting will be cleared everytime a user leave a listing."),
        '#default_value' => variable_get('exposed_sorting_store_inputs', true),
    );
    
    $form['sirtaqui_exposed_sorting_query_orderby'] = array(
        '#type' => 'radios',
        '#title' => "hook_scl_query() ORDER BY clause behavior",
        '#description' => t("This hook is called at the very end of the process, just before SQL compilation"),
        '#default_value' => variable_get('sirtaqui_exposed_sorting_query_orderby', 0),
        '#options' => array(
            0 => t("None"),
            1 => t("Prepend"),
            2 => t("Append"),
            3 => t("Replace"),
        ),
    );
    
    return system_settings_form($form);
}

function sirtaqui_exposed_sorting_edit($clid) {
    $output = "";
    
    // Compatibilité : si le listing existe déjà lors de la mise à jour - à supprimer lors de la migration D7
    if(variable_get('scl_search_compat_mode', true) == true) {
        $form_params = so_forms_infos('sirtaqui_exposed_sorting', $clid);

        if(empty($form_params['secured_sfid'])) {
            $form_name = db_result(db_query("SELECT content_listing_name FROM {sirtaqui_content_listing} WHERE id=%d", $clid));
            
            $configuration = array(
                'name' => t("'@listing' exposed sorting", array('@listing' => $form_name)),
                'memorize' => true,
                'advanced' => false,
                'api_only' => false,
                'no_groups' => true,
                'buttons' => array(
                    'submit' => "Sort",
                    'reset' => "Reset",
                ),
                'perms' => array(
                    'configure' => 'administer SCL advanced features',
                    'display' => 'access content',
                ),
                'callbacks' => array(
                    'process' => 'sirtaqui_exposed_sorting_process_inputs',
                ),
            );

            so_forms_create('sirtaqui_exposed_sorting', $clid, $configuration);
        }
    }
    
    $output .= so_forms_configure('sirtaqui_exposed_sorting', $clid);
    
    return $output;
}

/**
 * Implementation of hook_scl_create
 */
function sirtaqui_exposed_sorting_scl_create($content_listing) {

    // On crée le formulaire des tris exposés:
    $configuration = array(
        'name' => t("'%listing' exposed sorting", array('%listing' => $content_listing->content_listing_name)),
        'memorize' => true,
        'advanced' => false,
        'api_only' => false,
        'no_groups' => true,
        'buttons' => array(
            'submit' => "Sort",
            'reset' => "Reset",
        ),
        'perms' => array(
            'configure' => 'administer SCL advanced features',
            'display' => 'access content',
        ),
        'callbacks' => array(
            'process' => 'sirtaqui_exposed_sorting_process_inputs',
        ),
    );

    so_forms_create('sirtaqui_exposed_sorting', $content_listing->id, $configuration);
}

function sirtaqui_exposed_sorting_so_forms($module, $id) {

    if($module != 'sirtaqui_exposed_sorting') {return;}

    $fields = array();

    $fields['fields_definitions'] = array(
        'exposed_field' => array(
            'label' => 'Exposed field',
            'type' => 'sorting',
            'callbacks' => array(
                'values' => 'sirtaqui_exposed_sorting_field_values',
                'configuration' => 'sirtaqui_exposed_sorting_field_configuration',
                'render' => 'sirtaqui_exposed_sorting_field_render',
            ),
        ),
    );
    
    $fields['types_definitions'] = array(
        'sorting' => array(
            'label' => 'Sorting',
            'class' => 'FormFieldSorting',
            'path' => drupal_get_path('module', 'sirtaqui_exposed_sorting') . '/forms_plugins/fields',
        ),
    );
    
    $fields['widgets_definitions'] = array(
        'sorting' => array(
            'label' => 'Sorting item',
            'class' => 'FormWidgetSorting',
            'path' => drupal_get_path('module', 'sirtaqui_exposed_sorting') . '/forms_plugins/widgets',
        ),
    );

    return $fields;
}

/*
 * so_forms field configuration callback
 */
function sirtaqui_exposed_sorting_field_configuration($field_infos, $langcode, $configuration) {

    module_load_include('inc', 'sirtaqui_content_listing', 'sirtaqui_content_listing.admin');

    $clid = $field_infos['field_context'];
    
    $content_listing = sirtaqui_load_sirtaqui_content_listing($clid);
    $content_types = unserialize($content_listing->sirtaqui_content);

    $content_listing_infos = array('clid' => $clid);

    $form = array(
        '#type' => 'fieldset',
        '#title' => t("Values"),
        '#collapsible' => true,
        '#weight' => -1,
        '#element_validate' => array('sirtaqui_exposed_sorting_field_configuration_validate'),
        '#submit' => 'sirtaqui_exposed_sorting_field_configuration_submit', // attribut custom propre à so_forms
        '#tree' => true,
    );
    
    // on passe les valeurs qui ont déjà été compilées
    $form['values'] = array(
        '#type' => 'value',
        '#value' => $configuration['values'],
    );

    $shared_fields = array();
    $temp_fields = array();
    $fields = array();

    // on consitue un tableau des champs communs à tous les types de contenus
    foreach($content_types as $content_type) {
        $tmp = sirtaqui_content_listing_form_fields_helper($content_type);

        if (empty($shared_fields)) {
            $shared_fields = $tmp;
        } else {
            $shared_fields = array_intersect_assoc($tmp, $shared_fields);
        }
    }

    // on constitue la liste provisoire de tous les champs
    foreach($content_types as $content_type) {
        $tmp = sirtaqui_content_listing_form_fields_helper($content_type, $content_listing_infos['fields']);

        $temp_fields = array_merge($temp_fields, $tmp);
    }

    asort($temp_fields);

    // on constitue la liste définitive de tous les champs, et on marque les champs en commun
    foreach($temp_fields as $key => $value) {
        $fields[$key] = (isset($shared_fields[$key]) == true ? '*' : '') . $value;
    }

    $preview_fields = $fields;

    $form['content_listing_infos'] = array('#type' => 'value', '#value' => $content_listing_infos);

    array_unshift($fields, "- " . t("Available fields") . " -");

    $form['helper']['available_fields'] = array(
        '#type' => 'select',
        '#title' => t("Fields helper"),
        '#options' => $fields,
        '#attributes' => array('class' => 'fields_helper'),
        '#description' => t("* shared fields"),
    );

    $form['helper']['field_name_helper'] = array(
        '#type' => 'textfield',
        '#attributes' => array('class' => 'field_name_helper'),
    );

    $form['helper']['field_f_name_helper'] = array(
        '#type' => 'textfield',
        '#attributes' => array('class' => 'field_f_name_helper'),
    );

    $form['exposed_sorting_fragments'] = array();

    $form['exposed_sorting_fragments']['1'] = array(
        '#type' => 'textarea',
        '#title' => t("'ORDER BY' clause fragment") . " 1",
        '#wysiwyg' => false,
        '#default_value' => $configuration['exposed_sorting_fragments'][1],
        '#description' => t("This fragment will be inserted in query, as this :
                <br />ORDER BY <strong>[THE FRAGMENT]</strong>"),
    );

    $form['exposed_sorting_fragments']['2'] = array(
        '#type' => 'textarea',
        '#title' => t("'ORDER BY' clause fragment") . " 2",
        '#wysiwyg' => false,
        '#default_value' => $configuration['exposed_sorting_fragments'][2],
        '#description' => t("This fragment will be inserted in query, as this :
                <br />ORDER BY <strong>[THE FRAGMENT]</strong>"),
    );

    $form['preview_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t("Preview"),
        '#collapsible' => true,
        '#collapsed' => true,
    );

    global $language;

    $language_options = array_combine(array_keys(language_list()), array_keys(language_list()));

    $language_options = array_merge(array(
        '0' => t('all'),
    ), $language_options);

    $form['preview_settings']['to_test'] = array(
        '#type' => 'radios',
        '#title' => t("Fragment to test"),
        '#options' => array(
            1 => t("Fragment") . " 1",
            2 => t("Fragment") . " 2",
        ),
        '#default_value' => isset($configuration['preview_settings']['to_test']) ? $configuration['preview_settings']['to_test'] : 1,
    );

    $form['preview_settings']['language'] = array(
        '#type' => 'select',
        '#title' => t("Language filter"),
        '#options' => $language_options,
        '#default_value' => isset($configuration['preview_settings']['language']) ? $configuration['preview_settings']['language'] : $language->language,
    );

    $form['preview_settings']['fields'] = array(
        '#type' => 'select',
        '#title' => t("Fields to display in preview, in addition to 'nid', 'title' and 'type'"),
        '#options' => $preview_fields,
        '#multiple' => true,
        '#size' => 10,
        '#default_value' => $configuration['preview_settings']['fields'],
        '#description' => t("* shared fields"),
    );

    $form['preview_settings']['limit'] = array(
        '#type' => 'textfield',
        '#title' => t("Number of results"),
        '#size' => 4,
        '#default_value' => !empty($configuration['preview_settings']['limit']) ? $configuration['preview_settings']['limit'] : 50,
    );

    $form['preview_settings']['preview'] = array(
        '#type' => 'submit',
        '#value' => t("Try the sort"),
    );

    if(!empty($configuration['storage'])) {

        $error = "";

        set_error_handler(function($code, $msg) use (&$error) {
            $error = $msg;
        }, E_ALL & ~E_NOTICE | E_STRICT);

        if($configuration['preview_settings']['language'] !== '0') {
            i18n_selection_mode('custom', "%alias.language ='" . $configuration['preview_settings']['language'] . "' OR %alias.language ='' OR %alias.language IS NULL");
        }

        $listing['#preview_fragment'] = $configuration['storage']['fragment'];
        $listing['#preview_joins'] = $configuration['storage']['joins'];

        $listing['#preview_nids'] = scl_compile_listing($clid, array(
            'paginate' => false,
            'filters' => true,
            'advanced_filters' => true,
            'sorting' => true,
            'limit' => $configuration['storage']['limit'],
            'search' => false, // on ne veut pas fausser les résultats
            'hook_query' => false,
            'ignore_post' => true, // pertinent, car on travail avec un formulaire soumis mais rebuilded donc non-redirigé
        ), $configuration['storage']['query']);

        $listing['#preview_fields'] = $configuration['storage']['fields'];
        $listing['#preview_error'] = $error;

        if($configuration['preview_settings']['language'] !== '0') {
            i18n_selection_mode('reset');
        }

        restore_error_handler();
    }

    $form['preview'] = array(
        '#type' => 'markup',
        '#value' => theme('sirtaqui_content_listing_edit_sorting', $listing),
    );

    return $form;
}

function sirtaqui_exposed_sorting_field_configuration_validate($form, &$form_state) {

    // on ne doit pas stocker les valeurs du fields helper
    unset($form_state['values']['configuration']['module_custom']['helper']);

    $fragments = array_filter($form_state['values']['configuration']['module_custom']['exposed_sorting_fragments']);

    if(empty($fragments)) {
        form_set_error('configuration][module_custom][exposed_sorting_fragments', t("You must set at least one 'ORDER BY' clause"));
    }
}

function sirtaqui_exposed_sorting_field_configuration_submit($form, &$form_state) {

    $query = sirtaqui_content_listing_init_query();

    $order_fragments = $form_state['values']['configuration']['module_custom']['exposed_sorting_fragments'];
    $fields = $form_state['values']['configuration']['module_custom']['content_listing_infos']['fields'];

    foreach($order_fragments as $key => $order_fragment) {
        $order_fields = array();
        $index_replacement = 0;

        // on doit effectuer les remplacements en deux temps, pour ne pas réécrire des champs déjà réécrits
        $order_fragment = preg_replace_callback('#\b(field_[a-z0-9_]+)(?:_value|_value2|_fid)\b#',
            function($element) use (&$order_fields, &$index_replacement, $fields) {
                $index = '$' . $index_replacement++;

                // une petite sécurité, pour se prémunir (en partie) d'une erreur de capture de l'expreg
                if(!in_array($element[1], $fields)) {
                    return $element[0];
                }

                $order_fields[$index] = $element; // [0] : nom du champ dans la table, [1] : nom du champ CCK

                return $index;
            },
        $order_fragment);

        $taxo_joins = array();

        foreach($order_fields as $replacement => $field) {
            $query_fragment = sirtaqui_content_listing_prepare_query_fragment_data($field[1] . '@sirtaqui', $content_type); // TODO : $content_type ???

            // on ne prends que le champ qui nous intéresse
            $field_index = array_search($field[0], array_keys($query_fragment->infos));

            $query_field = $query_fragment->fields[$field_index];

            $query['join'] = array_merge($query['join'], $query_fragment->joins);

            // champs de taxonomy
            // on joint la table {term_data} en lui générant un alias propre à ce champs : nom du champ + '_taxo'
            if($query_fragment->infos[$field[0]]['type'] == 'content_taxonomy') {

                $join = "LEFT JOIN {term_data} AS " . $field[1] . "_taxo ON " . $field[1] . "_taxo.tid=" . $query_fragment->fields[0];
                $query['join'][] = $join;
                $taxo_joins[] = $join;

                $query_field = $field[1] . "_taxo.name";
            }

            $order_fragment = str_replace($replacement, $query_field, $order_fragment);
        }
        
        $order_fragments[$key] = $order_fragment;
    }

    switch(array_pop($form_state['clicked_button']['#parents'])) {
        case 'preview':
            
            $query['order_by'] = array($order_fragments[$form_state['values']['configuration']['module_custom']['preview_settings']['to_test']]);

            $form_state['values']['configuration']['module_custom']['storage']['limit'] = $form_state['values']['configuration']['module_custom']['preview_settings']['limit'];
            $form_state['values']['configuration']['module_custom']['storage']['query'] = $query;
            $form_state['values']['configuration']['module_custom']['storage']['fragment'] = $order_fragments[$form_state['values']['configuration']['module_custom']['preview_settings']['to_test']];
            $form_state['values']['configuration']['module_custom']['storage']['joins'] = implode('<br />', $taxo_joins);
            $form_state['values']['configuration']['module_custom']['storage']['fields'] = $form_state['values']['configuration']['module_custom']['preview_settings']['fields'];

            break;

        case 'submit':
            
            unset($form_state['values']['configuration']['module_custom']['content_listing_infos']);
            unset($form_state['values']['configuration']['module_custom']['preview_settings']);

            $form_state['values']['configuration']['module_custom']['values'] = $order_fragments;
            $form_state['values']['configuration']['module_custom']['query_joins'] = $query['join'];
            
            break;
    }
}

/*
 * so_forms field values callback
 */
function sirtaqui_exposed_sorting_field_values($field_infos, $langcode, $configuration) {
    
    if(empty($configuration['values'])) {return;}

    $values = array();
    
    foreach(array_filter($configuration['values']) as $index => $value) {
        $values[] = array(
            'value' => $value,
            'alias' => t("Fragment") . " " . $index,
        );
    }
    
    return $values;
}

/*
 * so_forms field render callback
 */
function sirtaqui_exposed_sorting_field_render($field_infos, $langcode, $configuration, $element) {

    if(!empty($element['#default_value'])) {
        $class = ' active';
    }
    
    $element['#prefix'] = "<div class='exposed_sorting_item" . $class . "'>";
    $element['#suffix'] = "</div>";
    
    return $element;
}

/*
 * so_forms process callback
 */
function sirtaqui_exposed_sorting_process_inputs($module, $id, &$user_inputs, &$user_raw_inputs, $stored_inputs) {
    
    // Les champs de tris ne doivent pas être cumulés.
    // s'il y a plus d'une entrée, il faut déterminer quelle est la plus récente, et supprimer les autres.
    
    $num_inputs = count($user_inputs);
    $num_new_inputs = $num_inputs - count($stored_inputs);

    // Plus d'une nouvelle valeur : le formulaire a été trafiqué ou un problème JQuery est survenu. On ne traite pas les données.
    if($num_new_inputs > 1) {
        $user_inputs = null;
        $user_raw_inputs = null;
        return;
    }
    
    foreach((array)$user_inputs as $key => $user_input) {
        if($num_inputs > 1 && $stored_inputs[$key]['is_old'] == true) {
            unset($user_raw_inputs[$user_inputs[$key]['field_id']]);
            unset($user_inputs[$key]);            
        } else {
            $user_inputs[$key]['is_old'] = true;
        }
    }
}

function sirtaqui_exposed_sorting_scl_query(&$query, &$compiler_options, $content_listing) {
    
    // TODO : ATTENTION ! Si on a deux listings dotés d'au moins un form, il va y avoir un problème...
    if(variable_get('exposed_sorting_store_inputs', true) != true && $content_listing->id != $_SESSION['last_listing_clid']) {
        so_forms_get_user_inputs('sirtaqui_exposed_sorting', $_SESSION['last_listing_clid'], true); // 'true' => clear data
    }
    
    $user_inputs = array_values((array)so_forms_get_user_inputs('sirtaqui_exposed_sorting', $content_listing->id));

    $orderby_mode = variable_get('sirtaqui_exposed_sorting_query_orderby', 0);
    
    if($orderby_mode != 0 && !empty($user_inputs)) {
        
        if($user_inputs[0]['module_name'] != 'sirtaqui_exposed_sorting') {
            $tmp_query = array(
                'fields' => array(),
                'join' => array(),
                'where' => array(),
                'group_by' => array(),
                'having' => array(),
                'order_by' => array(),
                'args' => array(),
            );

            $function = $user_inputs[0]['module_name'] . '_sirtaqui_exposed_sorting';
            
            // on passe leurs données aux modules
            $function($tmp_query, $user_inputs);

            $order_by_clause = $tmp_query['order_by'][0];
            unset($tmp_query['order_by'][0]);
            
            $query = array_merge_recursive($query, $tmp_query);
            
        } else {
            $query['join'] = array_merge($query['join'], (array)$user_inputs[0]['configuration']['query_joins']);
            $order_by_clause = $user_inputs[0]['values'][0];
        }
        
        switch($orderby_mode) {
            case 1: // prepend
                array_unshift($query['order_by'], $order_by_clause);
                break;

            case 2: // append
                array_push($query['order_by'], $order_by_clause);
                break;

            case 3: // replace
                $query['order_by'] = array($order_by_clause);
                break;
        }
    }
}

function sirtaqui_exposed_sorting_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
    
    if(variable_get('exposed_sorting_store_inputs', true) != true && $node->type != 'listing' && $a4 == true && $op == 'view') {        
        so_forms_get_user_inputs('sirtaqui_exposed_sorting', $_SESSION['last_listing_clid'], true); // 'true' => clear data        
    }
}